Como usar o Git no Linux:

O git serve para mandar os códigos para um diretório específico (repositório) da máquina local chamado .git, para poder enviá-los ao Github, onde todo mundo vê seu trabalho e pode interagir com ele.

Instalação:

$ sudo apt install git

Alguns comandos são:

$ git init			Inicia o git, criando uma pasta oculta chamada .git
$ git add			Adiciona os arquivos ou pastas modificados em uma lista de controle para posterior envio. (git add . adiciona tudo na pasta vigente)
$ git commit			Lança o código para a comudidade com um infomrativo que facilite a compreensão do código pela comunidade.
$ git status			mostra várias informações, incluindo códigos que já foram ou vão ser commited com a comunidade.
$ git clone			Baixa um repositório inserindo um endereço HTTPS. e.g. https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/freirefellipe/Analytics.git
$ git push origin main		faz as alterações do local (origin) para o site do GitHub (main)
$ git checkout			desfaz modificações feitas, em vez de adicioná-las com '$ git add'
$ git log <file-name>		Pode ser com ou sem o nome do arquivo. Mostra o histórico de atividade


Recomenda-se adicionar o link do repositório no portifólio do linkedin


$ sudo apt install gh					instala o GitHub no SO
$ gh auth login						conecta o GitHub ao SO local, recomenda-se inserção de um token
$ gh repo clone freirefellipe/analytics			baixa a pasta (clona o repositório) no SO local para se trabalhar offline


$ head -n 10 .gitignore		quando na mesma pasta que se encontra o arquivo .gitignore, mostra as 10 primerias linhas do arquivo.



GIT & GITHUB, zonas:

¬ working [trabalho]
     Momento de desenvolvimento do código. ($ git add)

¬ staging [preparação]
     Prepara para serem salvas (zona inter)($ git commit)

¬ repository [alteração local]
     Persistir (salvar) os códigos na máquina ($ git push, "terminfei uma versão do meu código")

¬ remote [alteração remota]
     Persiste remotamente


$ git fetch -prune				o fetch atualiza a lista de branches existentes criadas até o momento, e -prune é para apagar as que não existem mais.
$ git checkout -b develop main			Cria e seleciona um novo ramo, nesse caso, chamado develop. Só vai aparecer na lista de remote quando der push.





